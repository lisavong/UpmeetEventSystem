{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"app/repository.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = function (a1) {\n  return [\"/event-details\", a1];\n};\nfunction EventComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const event_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c0, i_r4 + 1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(event_r3.name);\n  }\n}\nfunction EventComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"form\", 5, 6);\n    i0.ɵɵlistener(\"ngSubmit\", function EventComponent_div_8_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const _r5 = i0.ɵɵreference(2);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.addFavorite(_r5));\n    });\n    i0.ɵɵelementStart(3, \"label\", 7);\n    i0.ɵɵtext(4, \"User ID:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 8);\n    i0.ɵɵelementStart(6, \"label\", 9);\n    i0.ɵɵtext(7, \"Event ID:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 10);\n    i0.ɵɵelementStart(9, \"button\");\n    i0.ɵɵtext(10, \"Add Favorite\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction EventComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"form\", 5, 11);\n    i0.ɵɵlistener(\"ngSubmit\", function EventComponent_div_13_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const _r8 = i0.ɵɵreference(2);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.addEvent(_r8));\n    });\n    i0.ɵɵelementStart(3, \"p\")(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Date of Event:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\")(8, \"label\", 14);\n    i0.ɵɵtext(9, \"Event Name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\")(12, \"label\", 16);\n    i0.ɵɵtext(13, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"p\")(16, \"label\", 18);\n    i0.ɵɵtext(17, \"Price per ticket:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"input\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\")(20, \"label\", 20);\n    i0.ɵɵtext(21, \"Location:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\")(24, \"button\");\n    i0.ɵɵtext(25, \"Add New Event\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nexport class EventComponent {\n  constructor(repositoryService) {\n    this.repositoryService = repositoryService;\n    this.date = \"\";\n    this.name = \"\";\n    this.description = \"\";\n    this.price = \"\";\n    this.location = \"\";\n    this.userID = -1;\n    this.eventID = -1;\n    this.buttonEventText = \"Click To Add A New Event!\";\n    this.buttonFaveText = \"Want To Add An Event To Your Favorites List?\";\n    this.showEventAdd = false;\n    this.showFaveAdd = false;\n  }\n  ngOnInit() {\n    this.gettEvents();\n  }\n  toggleAddEvent() {\n    this.showEventAdd = !this.showEventAdd;\n    if (this.showEventAdd) {\n      this.buttonEventText = \"Close\";\n    } else {\n      this.buttonEventText = \"Click To Add A New Event!\";\n    }\n  }\n  addEvent(form) {\n    let newEvent = {\n      eventID: -1,\n      date: form.form.value.date,\n      name: form.form.value.name,\n      description: form.form.value.description,\n      price: form.form.value.price,\n      location: form.form.value.location\n    };\n    this.repositoryService.addEvent(newEvent).subscribe(() => {\n      this.gettEvents();\n    });\n    form.resetForm();\n  }\n  gettEvents() {\n    this.repositoryService.getEvents().subscribe(response => {\n      this.events = response;\n    });\n  }\n  toggleAddFave() {\n    this.showFaveAdd = !this.showFaveAdd;\n    if (this.showFaveAdd) {\n      this.buttonFaveText = \"Close\";\n    } else {\n      this.buttonFaveText = \"Want To Add An Event To Your Favorites List?\";\n    }\n  }\n  addFavorite(form) {\n    let newFavorite = {\n      id: -1,\n      userID: form.form.value.userID,\n      eventID: form.form.value.eventID\n    };\n    this.repositoryService.addFavorite(newFavorite).subscribe(() => {});\n  }\n}\nEventComponent.ɵfac = function EventComponent_Factory(t) {\n  return new (t || EventComponent)(i0.ɵɵdirectiveInject(i1.RepositoryService));\n};\nEventComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EventComponent,\n  selectors: [[\"app-event\"]],\n  decls: 14,\n  vars: 5,\n  consts: [[2, \"text-align\", \"center\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [4, \"ngIf\"], [\"routerLinkActive\", \"active\", 3, \"routerLink\"], [3, \"ngSubmit\"], [\"newFavoriteForm\", \"ngForm\"], [\"for\", \"userID\"], [\"name\", \"userID\", \"id\", \"userID\", \"ngModel\", \"\"], [\"for\", \"eventID\"], [\"name\", \"eventID\", \"id\", \"eventID\", \"ngModel\", \"\"], [\"newEventForm\", \"ngForm\"], [\"for\", \"date\"], [\"name\", \"date\", \"id\", \"date\", \"ngModel\", \"\"], [\"for\", \"name\"], [\"name\", \"name\", \"id\", \"name\", \"ngModel\", \"\"], [\"for\", \"description\"], [\"name\", \"description\", \"id\", \"description\", \"ngModel\", \"\"], [\"for\", \"price\"], [\"name\", \"price\", \"id\", \"price\", \"ngModel\", \"\"], [\"for\", \"location\"], [\"name\", \"location\", \"id\", \"location\", \"ngModel\", \"\"]],\n  template: function EventComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Event List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, EventComponent_div_3_Template, 3, 4, \"div\", 1);\n      i0.ɵɵelement(4, \"br\")(5, \"hr\");\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function EventComponent_Template_button_click_6_listener() {\n        return ctx.toggleAddFave();\n      });\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, EventComponent_div_8_Template, 11, 0, \"div\", 3);\n      i0.ɵɵelement(9, \"br\")(10, \"hr\");\n      i0.ɵɵelementStart(11, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function EventComponent_Template_button_click_11_listener() {\n        return ctx.toggleAddEvent();\n      });\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, EventComponent_div_13_Template, 26, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.events);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.buttonFaveText);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFaveAdd);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.buttonEventText);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showEventAdd);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.RouterLink, i3.RouterLinkActive, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  styles: [\"body[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .container[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZXZlbnQvZXZlbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGtCQUFrQjtFQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImJvZHkge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuXHJcbiAgLmNvbnRhaW5lciB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","EventComponent","constructor","repositoryService","ngOnInit","gettEvents","toggleAddEvent","showEventAdd","buttonEventText","addEvent","form","newEvent","eventID","date","value","name","description","price","location","subscribe","resetForm","getEvents","response","events","toggleAddFave","showFaveAdd","buttonFaveText","addFavorite","newFavorite","id","userID","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\lisa.vongsiprasom\\source\\repos\\UpmeetEventSystem\\src\\app\\event\\event.component.html","C:\\Users\\lisa.vongsiprasom\\source\\repos\\UpmeetEventSystem\\src\\app\\event\\event.component.ts"],"sourcesContent":["<!-- <div>\r\n  <ul>\r\n    <li *ngFor=\"let event of events, index as eventID\">\r\n      <p>{{event.name}}</p>\r\n    </li>\r\n</ul>\r\n</div> -->\r\n\r\n<!-- <h3>Event List</h3>\r\n<div *ngFor=\"let event of events, index as i\">\r\n      <a [routerLink]=\"['/event-details', i+1]\" routerLinkActive=\"active\">{{event.name}}</a>\r\n</div>\r\n<br>\r\n<hr>\r\n<button (click)=\"toggleAddFave()\">{{buttonFaveText}}</button>\r\n<div *ngIf=\"showFaveAdd\">\r\n  <form #newFavoriteForm=\"ngForm\" (ngSubmit)=\"addFavorite(newFavoriteForm)\">\r\n    <label for=\"userID\">User ID:</label> <input name=\"userID\" id=\"userID\" ngModel />\r\n    <label for=\"eventID\">Event ID:</label> <input name=\"eventID\" id=\"eventID\" ngModel />\r\n    <button>Add Favorite</button>\r\n  </form>\r\n</div>\r\n<br>\r\n<hr>\r\n<button (click)=\"toggleAddEvent()\">{{buttonEventText}}</button>\r\n<div *ngIf=\"showEventAdd\">\r\n  <form #newEventForm=\"ngForm\" (ngSubmit)=\"addEvent(newEventForm)\">\r\n    <p> <label for=\"date\">Date of Event:</label> <input name=\"date\" id=\"date\" ngModel /></p>\r\n    <p> <label for=\"name\">Event Name:</label> <input name=\"name\" id=\"name\" ngModel /> </p>\r\n    <p> <label for=\"description\">Description:</label> <input name=\"description\" id=\"description\" ngModel /></p>\r\n    <p> <label for=\"price\">Price per ticket:</label> <input name=\"price\" id=\"price\" ngModel /></p>\r\n    <p> <label for=\"location\">Location:</label> <input name=\"location\" id=\"location\" ngModel /></p>\r\n    <p><button>Add New Event</button></p>\r\n    </form>\r\n</div> -->\r\n\r\n<!-- <mat-form-field appearance=\"outline\"> -->\r\n  \r\n<!-- </mat-form-field> -->\r\n\r\n\r\n<!-- <p> <mat-label for=\"date\">Date of Event:</mat-label> <input matInput [matDatepicker]=\"picker\" \r\n  name=\"date\" id=\"date\" ngModel />\r\n  <mat-hint>MM/DD/YYYY</mat-hint>\r\n  <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker></p> -->\r\n\r\n\r\n\r\n  <div style=\"text-align: center;\">\r\n    <h1>Event List</h1>\r\n    <div *ngFor=\"let event of events, index as i\">\r\n      <a [routerLink]=\"['/event-details', i+1]\" routerLinkActive=\"active\">{{event.name}}</a>\r\n    </div>\r\n    <br>\r\n    <hr>\r\n    <button (click)=\"toggleAddFave()\">{{buttonFaveText}}</button>\r\n    <div *ngIf=\"showFaveAdd\">\r\n      <form #newFavoriteForm=\"ngForm\" (ngSubmit)=\"addFavorite(newFavoriteForm)\">\r\n        <label for=\"userID\">User ID:</label> <input name=\"userID\" id=\"userID\" ngModel />\r\n        <label for=\"eventID\">Event ID:</label> <input name=\"eventID\" id=\"eventID\" ngModel />\r\n        <button>Add Favorite</button>\r\n      </form>\r\n    </div>\r\n    <br>\r\n    <hr>\r\n    <button (click)=\"toggleAddEvent()\">{{buttonEventText}}</button>\r\n    <div *ngIf=\"showEventAdd\">\r\n      <form #newEventForm=\"ngForm\" (ngSubmit)=\"addEvent(newEventForm)\">\r\n        <p> <label for=\"date\">Date of Event:</label> <input name=\"date\" id=\"date\" ngModel /></p>\r\n        <p> <label for=\"name\">Event Name:</label> <input name=\"name\" id=\"name\" ngModel /> </p>\r\n        <p> <label for=\"description\">Description:</label> <input name=\"description\" id=\"description\" ngModel /></p>\r\n        <p> <label for=\"price\">Price per ticket:</label> <input name=\"price\" id=\"price\" ngModel /></p>\r\n        <p> <label for=\"location\">Location:</label> <input name=\"location\" id=\"location\" ngModel /></p>\r\n        <p><button>Add New Event</button></p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  ","import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { IEvent } from 'app/interfaces/event';\r\nimport { IFavorites } from 'app/interfaces/favorites'\r\nimport { RepositoryService } from 'app/repository.service';\r\n\r\n@Component({\r\n  selector: 'app-event',\r\n  templateUrl: './event.component.html',\r\n  styleUrls: ['./event.component.css']\r\n})\r\nexport class EventComponent {\r\n\r\n  \r\n\r\n  constructor(private repositoryService: RepositoryService) { }\r\n  events: any;\r\n  date: string =\"\";\r\n  name: string = \"\";\r\n  description: string = \"\";\r\n  price: string = \"\";\r\n  location: string= \"\";\r\n  userID: number = -1;\r\n  eventID: number =-1;\r\n\r\n  buttonEventText: string = \"Click To Add A New Event!\";\r\n  buttonFaveText: string = \"Want To Add An Event To Your Favorites List?\"\r\n  showEventAdd: boolean = false;\r\n  showFaveAdd: boolean = false;\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.gettEvents();\r\n  }\r\n\r\n  toggleAddEvent(): void {\r\n    this.showEventAdd = !this.showEventAdd;\r\n    if (this.showEventAdd) {\r\n      this.buttonEventText = \"Close\";\r\n    }\r\n    else {\r\n      this.buttonEventText = \"Click To Add A New Event!\";\r\n    }\r\n  }\r\n\r\n  addEvent(form: NgForm) {\r\n    let newEvent: IEvent = {\r\n      eventID: -1,\r\n      date: form.form.value.date,\r\n      name: form.form.value.name,\r\n      description: form.form.value.description,\r\n      price: form.form.value.price,\r\n      location: form.form.value.location\r\n    };\r\n\r\n    this.repositoryService.addEvent(newEvent).subscribe(\r\n      () => {\r\n        this.gettEvents();\r\n      }\r\n    );\r\n\r\n    form.resetForm();\r\n  };\r\n\r\n  gettEvents() {\r\n    this.repositoryService.getEvents().subscribe(\r\n      (response) => {\r\n        this.events = response;\r\n      });\r\n  }\r\n\r\n  toggleAddFave(): void {\r\n    this.showFaveAdd = !this.showFaveAdd;\r\n    if (this.showFaveAdd) {\r\n      this.buttonFaveText = \"Close\";\r\n    }\r\n    else {\r\n      this.buttonFaveText = \"Want To Add An Event To Your Favorites List?\";\r\n    }\r\n  }\r\n\r\n  addFavorite(form: NgForm) {\r\n   let newFavorite: IFavorites = {\r\n    id: -1,\r\n    userID: form.form.value.userID,\r\n    eventID: form.form.value.eventID\r\n   };\r\n\r\n   this.repositoryService.addFavorite(newFavorite).subscribe(\r\n    () => {}\r\n   );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}